    # Define function to compute V(0,U,T) for piecewise constant sigma
    def compute_V0UT(U_index, T, a, sigma_array, swaption_expiry_years_list):
        k = U_index
        V0UT = 0.0
        for j in range(k + 1):
            t_lower = swaption_expiry_years_list[j-1] if j > 0 else 0.0
            t_upper = swaption_expiry_years_list[j]
            sigma_j = sigma_array[j]
            V0UT += HW_V(t_upper, t_lower, T, a, sigma_j)
        return V0UT

    # Define function to compute all Hull-White swaption prices for a given sigma_array
    def compute_all_hw_swaption_values(sigma_array, a=0.05):
        # Compute cumulative V(0,t,t) values
        cumulative_hw_v_values = calculate_cumulative_hw_v(swaption_expiry_years_list, sigma_array, a)

        # Compute cumulative mu(t) values
        mu_t_cumulative_list = []
        for k in range(len(swaption_expiry_years_list)):
            U = swaption_expiry_years_list[k]
            cumulative_mu = 0.0
            for j in range(k + 1):
                t_lower = swaption_expiry_years_list[j-1] if j > 0 else 0.0
                t_upper = swaption_expiry_years_list[j]
                vol = sigma_array[j]
                mu_val = mu_t(t_upper, t_lower, U, a, vol)
                cumulative_mu += mu_val
            mu_t_cumulative_list.append(cumulative_mu)

        # Compute cumulative Sigma^2(t) values
        cumulative_sigma_sq_list = []
        for k in range(len(swaption_expiry_years_list)):
            U = swaption_expiry_years_list[k]
            cumulative_sigma_sq = 0.0
            for j in range(k + 1):
                t_lower = swaption_expiry_years_list[j-1] if j > 0 else 0.0
                t_upper = swaption_expiry_years_list[j]
                vol = sigma_array[j]
                sigma_sq_val = sigma_t_interval(t_upper, t_lower, U, a, vol)
                cumulative_sigma_sq += sigma_sq_val
            cumulative_sigma_sq_list.append(cumulative_sigma_sq)

        # Compute A(t,T) for each swaption
        A_values_list = []
        for i, row in swaption_schedule.iterrows():
            t = row['Swaption_expiry_years']
            P0t = get_discount_factor(t)
            V0tt = cumulative_hw_v_values[i]
            payment_times = row['payment_years']
            A_swaption = []
            for T in payment_times:
                if T < t:
                    A_val = 1.0
                else:
                    P0T = get_discount_factor(T)
                    V0tT = compute_V0UT(i, T, a, sigma_array, swaption_expiry_years_list)
                    exponent = (V0tt - V0tT) / 2.0
                    A_val = (P0T / P0t) * np.exp(exponent)
                A_swaption.append(A_val)
            A_values_list.append(A_swaption)

        # Compute swaption prices
        hw_swaption_values = []
        for i in range(len(swaption_schedule)):
            row = swaption_schedule.iloc[i]
            A_tT_values = A_values_list[i]
            payment_times = row['payment_years']
            K = strikes[i]
            N = len(payment_times)
            tau_values = np.diff(payment_times)

            # Compute C terms
            C_terms = [1.0]  # C_0
            for j in range(1, N-1):
                tau_i = tau_values[j-1]
                C_i = -tau_i * K * A_tT_values[j]
                C_terms.append(C_i)
            tau_N = tau_values[-1]
            C_N = -(1 + tau_N * K) * A_tT_values[-1]
            C_terms.append(C_N)

            hw_b_values = row['HW_B']
            mu_t_val = mu_t_cumulative_list[i]
            sigma_sq_val = cumulative_sigma_sq_list[i]
            sigma_val = np.sqrt(sigma_sq_val)

            # Solve for epsilon_star
            def objective(epsilon):
                exp_B_XT = [np.exp(-B_val * (mu_t_val + sigma_val * epsilon)) for B_val in hw_b_values]
                sum_cterm_bterm = sum(c * b for c, b in zip(C_terms, exp_B_XT))
                return sum_cterm_bterm

            try:
                result = root_scalar(objective, bracket=[-10, 10], method='brentq')
                epsilon_star = result.root
            except ValueError:
                epsilon_star = 0.0  # Fallback value

            # Compute swaption value
            swaption_value = 0.0
            for c_i, B_val in zip(C_terms, hw_b_values):
                exp_term = np.exp(0.5 * B_val**2 * sigma_sq_val - B_val * mu_t_val)
                phi_arg = -(epsilon_star + B_val * sigma_val)
                phi_value = norm.cdf(phi_arg)
                term = c_i * exp_term * phi_value
                swaption_value += term
            hw_swaption_values.append(swaption_value)

        # Discount swaption values to valuation date
        discounted_hw_swaption_values = []
        for i, value in enumerate(hw_swaption_values):
            t = swaption_schedule.iloc[i]['Swaption_expiry_years']
            discount_factor = get_discount_factor(t)
            discounted_value = value * discount_factor
            discounted_hw_swaption_values.append(discounted_value)

        return discounted_hw_swaption_values

    # Calibration process
    sigma_array = np.array([0.02] * len(maturities))
    for k in range(len(maturities)):
        market_price_k = market_price[k]

        def error_func(sigma_k):
            sigma_temp = sigma_array.copy()
            sigma_temp[k] = sigma_k
            hw_prices = compute_all_hw_swaption_values(sigma_temp)
            hw_price_k = hw_prices[k]
            return hw_price_k - market_price_k

        try:
            result = root_scalar(error_func, bracket=[0.0001, 1.0], method='brentq')
            sigma_array[k] = result.root
        except ValueError as e:
            print(f"Calibration failed for swaption {k}: {e}")
            sigma_array[k] = 0.02  # Fallback to initial value

    # Compute final calibrated Hull-White prices
    calibrated_hw_prices = compute_all_hw_swaption_values(sigma_array)

    # Compute differences between market and calibrated Hull-White prices
    price_differences = [market - hw for market, hw in zip(market_price, calibrated_hw_prices)]

    # Append results to swaption_schedule
    swaption_schedule['calibrated_sigma'] = sigma_array
    swaption_schedule['hw_price_calibrated'] = calibrated_hw_prices
    swaption_schedule['price_difference'] = price_differences

    # Optional: Display the updated swaption_schedule
    print(swaption_schedule[['Expiry_Date', 'calibrated_sigma', 'hw_price_calibrated', 'price_difference']])
